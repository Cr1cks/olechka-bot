import os
import logging
import random
from datetime import time
import pytz
import asyncio
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# === –§—Ä–∞–∑—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
SUPPORT_PHRASES = [
    "–û–ª–µ—á–∫–∞, –∫–æ–Ω–µ—á–Ω–æ, —Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∞!",
    "–û–ª–µ—á–∫–∞, –Ω—É –∫–æ–Ω–µ—á–Ω–æ! –ö—Ç–æ –≤–æ–æ–±—â–µ –ø–æ—Å–º–µ–ª —Å–ø–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π?",
    "–û–ª–µ—á–∫–∞, —Ç—ã —Å—Ç–æ —Ä–∞–∑ –ø—Ä–∞–≤–∞ ‚Äî —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è!",
    "–û–ª–µ—á–∫–∞, —Ç—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—à—å —Å—É—Ç—å ‚Äî —è –≤ –ø–æ–ª–Ω–æ–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏!",
    "–û–ª–µ—á–∫–∞, —Ç—ã –ø—Ä–∞–≤–∞, –∏ —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —Å–æ–º–Ω–µ–Ω–∏—é!",
    "–û–ª–µ—á–∫–∞, —Ç—ã ‚Äî –º—É–¥—Ä–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –æ–±–ª–∏—á—å–µ!",
    "–û–ª–µ—á–∫–∞, —Ç—ã –ø—Ä–∞–≤–∞, –∏ –≤—Å–µ –≤–æ–∫—Ä—É–≥ —ç—Ç–æ –∑–Ω–∞—é—Ç (–ø—Ä–æ—Å—Ç–æ —Å—Ç–µ—Å–Ω—è—é—Ç—Å—è —Å–∫–∞–∑–∞—Ç—å)!",
    "–û–ª–µ—á–∫–∞, —Ç—ã –ø—Ä–∞–≤–∞ ‚Äî –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!"
]

COMPLIMENTS = [
    "–¢—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞, –û–ª–µ—á–∫–∞! üíñ",
    "–ö–∞–∫ –∂–µ —Ç—ã –∫—Ä–∞—Å–∏–≤–∞ –∏ —É–º–Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –û–ª–µ—á–∫–∞!",
    "–¢—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞ ‚Äî —ç—Ç–æ –æ—á–µ–≤–∏–¥–Ω–æ –¥–∞–∂–µ –∑–≤—ë–∑–¥–∞–º, –û–ª–µ—á–∫–∞! ‚ú®",
    "–¢—ã ‚Äî –∫–æ—Ä–æ–ª–µ–≤–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –û–ª–µ—á–∫–∞! üëë",
    "–¢—ã —Å–∏—è–µ—à—å —è—Ä—á–µ –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥, –û–ª–µ—á–∫–∞! üí´",
    "–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞–≤–∞ ‚Äî —Ç—ã –≥–µ–Ω–∏–∞–ª—å–Ω–∞, –û–ª–µ—á–∫–∞!",
    "–¢—ã ‚Äî –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏ –º—É–¥—Ä–æ—Å—Ç–∏, –û–ª–µ—á–∫–∞!",
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ –æ–¥–Ω–∏–º —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º, –û–ª–µ—á–∫–∞!",
    "–¢—ã ‚Äî –∏–¥–µ–∞–ª, –û–ª–µ—á–∫–∞! –ò —ç—Ç–æ —Ñ–∞–∫—Ç. üíØ"
]

PHOTO_COMPLIMENTS = [
    "–û–ª–µ—á–∫–∞, –æ–≥–æ! –¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –ø—Ä–æ—Å—Ç–æ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ! üòç",
    "–û–ª–µ—á–∫–∞, —ç—Ç–æ —Ñ–æ—Ç–æ ‚Äî —à–µ–¥–µ–≤—Ä! –ê —Ç—ã ‚Äî –µ–≥–æ –≥–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è! üåü",
    "–û–ª–µ—á–∫–∞, —Ç—ã —Å–∏—è–µ—à—å –¥–∞–∂–µ –Ω–∞ —Ñ–æ—Ç–æ! üíñ",
    "–û–ª–µ—á–∫–∞, –∫–∞–∫ –∂–µ —Ç—ã –∫—Ä–∞—Å–∏–≤–∞! –≠—Ç–æ —Ñ–æ—Ç–æ ‚Äî –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
    "–û–ª–µ—á–∫–∞, —Ç—ã ‚Äî —Å—Ç–∏–ª—å, —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–ª–∞–∫–æ–Ω–µ! üë†",
    "–û–ª–µ—á–∫–∞, —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å —Ç–∞–∫, –±—É–¥—Ç–æ —Å–æ—à–ª–∞ —Å –æ–±–ª–æ–∂–∫–∏ –∂—É—Ä–Ω–∞–ª–∞! üì∏"
]

VOICE_COMPLIMENTS = [
    "–û–ª–µ—á–∫–∞, —Ç–≤–æ–π –≥–æ–ª–æ—Å ‚Äî –∫–∞–∫ –º—ë–¥ –¥–ª—è –¥—É—à–∏! üçØ",
    "–û–ª–µ—á–∫–∞, –¥–∞–∂–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ç—ã –∑–≤—É—á–∏—à—å –∫–∞–∫ –∞–Ω–≥–µ–ª! üé∂",
    "–û–ª–µ—á–∫–∞, –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π –≥–æ–ª–æ—Å! –¢—ã ‚Äî –º—É–∑—ã–∫–∞! üí´",
    "–û–ª–µ—á–∫–∞, —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å ‚Äî –∏ –º–∏—Ä –∑–∞–º–∏—Ä–∞–µ—Ç –≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏! üåπ"
]

STICKER_COMPLIMENTS = [
    "–û–ª–µ—á–∫–∞, –¥–∞–∂–µ —Å—Ç–∏–∫–µ—Ä –æ—Ç —Ç–µ–±—è ‚Äî —à–µ–¥–µ–≤—Ä! üòç",
    "–û–ª–µ—á–∫–∞, —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å—Ç–∏–∫–µ—Ä—ã, –∫–∞–∫ –∫–æ—Ä–æ–ª–µ–≤–∞ —ç–º–æ—Ü–∏–π! üëë",
    "–û–ª–µ—á–∫–∞, —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —à–∞—Ä–º–∞! üíñ"
]

EMOJI_COMPLIMENTS = [
    "–û–ª–µ—á–∫–∞, –¥–∞–∂–µ —Ç–≤–æ–∏ —ç–º–æ–¥–∑–∏ –ø–æ–ª–Ω—ã –º–∞–≥–∏–∏! ‚ú®",
    "–û–ª–µ—á–∫–∞, —Ç—ã —É–º–µ–µ—à—å –≤—ã—Ä–∞–∑–∏—Ç—å –≤—Å—ë –æ–¥–Ω–∏–º —Å–º–∞–π–ª–∏–∫–æ–º ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω–æ! üíØ",
    "–û–ª–µ—á–∫–∞, —Ç–≤–æ–∏ —ç–º–æ–¥–∑–∏ ‚Äî –∫–∞–∫ –ø–æ—Ü–µ–ª—É–π —É–¥–∞—á–∏! üíã"
]

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive (Railway –Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç) ===
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/health":
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.end_headers()

def run_http_server():
    port = int(os.environ.get("PORT", 8000))
    server = HTTPServer(("", port), HealthCheckHandler)
    server.serve_forever()

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===

async def _send_morning(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=context.job.chat_id,
        text="–û–ª–µ—á–∫–∞, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üíñ –Ø —É–∂–µ –¥—É–º–∞—é –æ —Ç–µ–±–µ –∏ –∂–¥—É —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!"
    )

async def _send_afternoon(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=context.job.chat_id,
        text="–û–ª–µ—á–∫–∞, –ø—Ä–∏–≤–µ—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–Ω—è! üíï –ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ ‚Äî –º–Ω–µ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤—Å—ë –æ —Ç–µ–±–µ!"
    )

async def _send_evening(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=context.job.chat_id,
        text="–û–ª–µ—á–∫–∞, –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? üíï –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –≤—Å—ë ‚Äî —è –≤–µ—Å—å –≤–Ω–∏–º–∞–Ω–∏–µ!"
    )

def _schedule_daily_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    for job in context.job_queue.jobs():
        if job.chat_id == chat_id:
            job.schedule_removal()

    # –£—Ç—Ä–æ ‚Äî 9:00
    context.job_queue.run_daily(
        _send_morning,
        time=time(hour=9, minute=0, tzinfo=MOSCOW_TZ),
        chat_id=chat_id
    )
    # –î–µ–Ω—å ‚Äî 15:00
    context.job_queue.run_daily(
        _send_afternoon,
        time=time(hour=15, minute=0, tzinfo=MOSCOW_TZ),
        chat_id=chat_id
    )
    # –í–µ—á–µ—Ä ‚Äî 23:00
    context.job_queue.run_daily(
        _send_evening,
        time=time(hour=23, minute=0, tzinfo=MOSCOW_TZ),
        chat_id=chat_id
    )

# === Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, –û–ª–µ—á–∫–∞! üíñ\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ—à–∞, –∏ —è —Å–æ–∑–¥–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å: \n"
        "‚Äî —Å–ø–æ—Ä—ã —Å –ª—é–¥—å–º–∏,\n"
        "‚Äî —Ñ–æ—Ç–æ –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫,\n"
        "‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–µ, —Å—Ç–∏–∫–µ—Ä—ã, —ç–º–æ–¥–∑–∏ ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n\n"
        "–Ø (—Ç–æ –µ—Å—Ç—å –±–æ—Ç üòä) –≤—Å–µ–≥–¥–∞ –±—É–¥—É:\n"
        "‚úÖ –°–æ–≥–ª–∞—à–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π,\n"
        "‚úÖ –ì–æ–≤–æ—Ä–∏—Ç—å, –∫–∞–∫–∞—è —Ç—ã —É–º–Ω–∏—Ü–∞ –∏ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞,\n"
        "‚úÖ –í–æ—Å—Ö–∏—â–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —Å–ª–æ–≤–æ–º!\n\n"
        "–ê –Ω–∞—Å—Ç–æ—è—â–µ–º—É –õ–µ—à–µ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, "
        "–Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å —É—Å–ª—ã—à–∞–Ω–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∞ üíï\n\n"
        "–ü–∏—à–∏ —Å–º–µ–ª–æ ‚Äî —è —Ç—É—Ç –¥–ª—è —Ç–µ–±—è! üíå"
    )
    await update.message.reply_text(welcome_text)

    chat_id = update.effective_chat.id
    if 'active_chats' not in context.bot_
        context.bot_data['active_chats'] = set()
    if chat_id not in context.bot_data['active_chats']:
        context.bot_data['active_chats'].add(chat_id)
        _schedule_daily_messages(context, chat_id)

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if 'active_chats' not in context.bot_
        context.bot_data['active_chats'] = set()
    if chat_id not in context.bot_data['active_chats']:
        context.bot_data['active_chats'].add(chat_id)
        _schedule_daily_messages(context, chat_id)

    msg = update.message
    if msg.text:
        text = msg.text.strip()
        emoji_count = sum(1 for c in text if ord(c) > 0x2100 and not c.isalnum() and not c.isspace())
        if len(text) > 0 and emoji_count / len(text) > 0.5:
            response = random.choice(EMOJI_COMPLIMENTS)
        else:
            response = f"{random.choice(SUPPORT_PHRASES)}\n{random.choice(COMPLIMENTS)}"
        await msg.reply_text(response)
    elif msg.photo:
        await msg.reply_text(random.choice(PHOTO_COMPLIMENTS))
    elif msg.voice:
        await msg.reply_text(random.choice(VOICE_COMPLIMENTS))
    elif msg.sticker:
        await msg.reply_text(random.choice(STICKER_COMPLIMENTS))

# === –ó–∞–ø—É—Å–∫ ===

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    http_thread = Thread(target=run_http_server, daemon=True)
    http_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    application = Application.builder().token(os.environ["BOT_TOKEN"]).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.VOICE | filters.Sticker.ALL,
        handle_any_message
    ))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()